<?xml version="1.0" encoding="UTF-8"?>

<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!DOCTYPE project PUBLIC "-//PHING GRAMMAR V0.1" "http://ondrejd.info/phing-grammar">

<!-- [[%tabstop:ProjectDescription]] -->

<project name="[[%tabstop:ProjectName]]" basedir="." default="list_targets" phingVersion="2.11.0">

	<!--
	<property file="./build.properties"/>
	-->

	<!-- <property name="phing_exec" value="php /home/ondrejd/Software/phing-latest.phar"/> -->
	<property name="phing_exec" value="php /home/ondrejd/Software/phing-latest.phar"/>
	<property name="builddir" value="./build"/>
	<property name="sourcedir" value="./src"/>
	<property name="testdir" value="./test"/>

	<!-- Timestamp is used for generating some files... -->
	<tstamp>
		<format property="check.date.time" pattern="%Y%m%d-%H%M%S" locale="en_US"/>
	</tstamp>

	<!-- Note: Used PHP tools (such as phpcmd etc.) are installed via Composer.
	   - We need to include them. This will work just on Linux when you install
	   - all required tools with global flag.
	   -->
	<autoloader autoloaderpath="/home/ondrejd/.composer/vendor/autoload.php"/>

	<!-- ================================================================ -->
	<!-- FileList with PHP source files                                   -->
	<!-- ================================================================ -->
	<fileset dir="${sourcedir}" id="source_files">
		<include name="stub.php"/>
		<include name="clistub.php"/>
		<include name="webstub.php"/>
		<include name="TipCars/**"/>
	</fileset>

	<!-- ================================================================ -->
	<!-- Target: list_targets                                             -->
	<!--                                                                  -->
	<!-- Default target - it just list all targets in this build file.    -->
	<!-- ================================================================ -->
	<target name="list_targets" hidden="true">
		<exec command="${phing_exec} -q -f ${phing.file} -l" passthru="true"/>
	</target>

	<!-- ================================================================ -->
	<!-- Target: prepare                                                  -->
	<!-- ================================================================ -->
	<target name="prepare" description="Prepares build directory.">
		<echo msg="Making directory ${builddir} ..."/>
		<mkdir dir="${builddir}"/>
		<echo msg="Copying some temporary build files..."/>
		<copy todir="${builddir}">
			<fileset dir=".">
				<include name="LICENSE"/>
				<include name="README.md"/>
			</fileset>
		</copy>
	</target>

	<!-- ================================================================ -->
	<!-- Target: tools                                                    -->
	<!-- ================================================================ -->
	<target name="tools" depends="prepare" description="Runs various tools for PHP code.">
		<mkdir dir="${builddir}/reports"/>
		<!-- PHP Code Sniffer -->
		<phpcodesniffer standard="PEAR" verbosity="0">
			<fileset refid="source_files"/>
			<formatter type="checkstyle"
			           outfile="${builddir}/reports/php_codesniffer-${check.date.time}.xml"/>
		</phpcodesniffer>
		<!-- PHP Copy/Paste Detector -->
		<phpcpd>
			<fileset refid="source_files"/>
			<formatter type="pmd" outfile="${builddir}/reports/phpcpd-${check.date.time}.xml"/>
		</phpcpd>
		<!-- phploc -->
		<phploc reportType="txt" reportName="phploc-${check.date.time}"
		        reportDirectory="${builddir}/reports">
			<fileset refid="source_files"/>
		</phploc>
		<!-- Project Mess Detector -->
		<phpmd>
			<fileset refid="source_files"/>
			<formatter type="xml" outfile="${builddir}/reports/pmd-${check.date.time}.xml"/>
		</phpmd>
		<!-- PHP Depend -->
		<phpdepend>
			<fileset refid="source_files"/>
			<!-- Loger types: "jdepend-chart", "jdepend-xml", "overview-pyramid",
			   - "phpunit-xml", "summary-xml"
			   -->
			<logger type="jdepend-xml"
			        outfile="${builddir}/reports/php_depend-${check.date.time}.xml"/>
			<analyzer type="coderank-mode" value="method"/>
		</phpdepend>
		<!-- PHP Lint -->
		<phplint>
			<fileset refid="source_files"/>
		</phplint>
		<!-- PHPUnit -->
		<!-- TODO Add codecoverage reports! -->
		<phpunit bootstrap="${testdir}/bootstrap.php" codecoverage="false">
			<!-- Formatter types: "xml", "plain", "clover", "summary" -->
			<formatter todir="${builddir}/reports" type="xml"/>
			<batchtest>
				<fileset dir="${testdir}">
					<include name="**/*Test.php"/>
				</fileset>
			</batchtest>
		</phpunit>
		<!-- ApiGen -->
	</target>

	<!-- ================================================================ -->
	<!-- Target: build                                                    -->
	<!-- ================================================================ -->
	<target name="build" depends="prepare"
	        description="Creates Phar package...">
		<!-- Note: There is also "webstub" attribute...
		   - See: https://www.phing.info/docs/stable/hlhtml/index.html#PharPackageTask
		   -->
		<pharpackage basedir="."
		             destfile="${builddir}/${project.name}.phar"
		             compression="gzip"
		             clistub="src/clistub.php"
		             webstub="src/webstub.php"
		             alias="${project.name}">
			<fileset refid="source_files"/>
			<metadata>
				<element name="version" value="${project.version}"/>
				<element name="authors">
					<element name="${project.author.name}">
						<element name="e-mail" value="${project.author.email}"/>
					</element>
				</element>
			</metadata>
		</pharpackage>
	</target>

	<!-- ================================================================ -->
	<!-- Target: dist (DEFAULT)                                           -->
	<!-- ================================================================ -->
	<target name="dist" depends="clean,build"
	        description="Creates distribution package.">
		<echo msg="Creating distribution package..."/>
		<tar destfile="${builddir}/${project.name}-${project.version}.tar.gz"
		     compression="gzip">
			<fileset dir="${builddir}">
				<include name="*"/>
			</fileset>
		</tar>
		<echo msg="Removing temporary build files..."/>
		<delete file="${builddir}/LICENSE"/>
		<delete file="${builddir}/README.md"/>
		<echo msg="Distribution package successfully created!"/>
	</target>

	<!-- ================================================================ -->
	<!-- Target: clean                                                    -->
	<!-- ================================================================ -->
	<target name="clean" description="Cleans build directory.">
		<echo msg="Cleaning build directory..."/>
		<delete dir="${builddir}" includeemptydirs="true" quiet="true"/>
	</target>

</project>
